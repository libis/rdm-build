################################################################################
# This script configures varaibles used in other shell scripts.
################################################################################

# required for bash for loop if no files found
shopt -s nullglob

# Include some sane defaults
. "${SCRIPT_DIR}/default.config"

# Dataverse URL
DATAVERSE_SERVICE_HOST="${DATAVERSE_SERVICE_HOST:-"dataverse"}"
DATAVERSE_SERVICE_PORT_HTTP="${DATAVERSE_SERVICE_PORT_HTTP:-"8080"}"
DATAVERSE_URL="${DATAVERSE_URL:-"http://${DATAVERSE_SERVICE_HOST}:${DATAVERSE_SERVICE_PORT_HTTP}"}"

# Solr URL
SOLR_SERVICE_HOST="${SOLR_SERVICE_HOST:-"solr"}"
SOLR_SERVICE_PORT_HTTP="${SOLR_SERVICE_PORT_HTTP:-"8983"}"
SOLR_URL="${SOLR_URL:-"http://${SOLR_SERVICE_HOST}:${SOLR_SERVICE_PORT_HTTP}"}"

# Check and load secrets
if [ ! -s "${SECRETS_DIR}/db/password" ]; then
  echo "No database password present. Failing."
  exit 126
fi
POSTGRES_PASSWORD=$(cat "${SECRETS_DIR}/db/password")

if [ ! -s "${SECRETS_DIR}/api/key" ]; then
  echo "No API key present. Failing."
  exit 126
fi
API_KEY=$(cat "${SECRETS_DIR}/api/key")

if [ ! -s "${SECRETS_DIR}/api/userskey" ]; then
  echo "No Users API key present. Failing."
  exit 126
fi
API_USERSKEY=$(cat "${SECRETS_DIR}/api/userskey")

# Drop the Postgres credentials into .pgpass
echo "${POSTGRES_SERVER}:*:*:${POSTGRES_USER}:${POSTGRES_PASSWORD}" > ${HOME_DIR}/.pgpass
chmod 0600 ${HOME_DIR}/.pgpass

# Load dataverseAdmin password if present
ADMIN_PASSWORD='admin'
if [ -s "${SECRETS_DIR}/admin/password" ]; then
  ADMIN_PASSWORD=$(cat "${SECRETS_DIR}/admin/password")
fi

check_reply () {
  echo "$REPLY" | jq -rM '.status' 2>/dev/null || echo -e 'FAILED\n' "$REPLY"
}

api_get () {
  api_call GET "$1" 
}

json_post () {
  json_call POST "$@"
}

json_put () {
  json_call PUT "$@"
}

json_delete () {
  json_call DELETE "$@"
}

URL_HEADERS=()

api_call () {
  # $1    Method
  # $2    api path
  # $@:3  other curl args
  
  local xtra_opts=()
  for h in "${URL_HEADERS[@]}"; do
    xtra_opts+=("-H" "$h")
  done

  local url="${DATAVERSE_URL}/api/${2}"
  local X='?' && [[ "$2" =~ \? ]] && X='&'
  [[ "${API_LOCAL:-x}" == "true" ]] || url="${url}${X}unblock-key=${API_KEY}"
  [[ "${API_DEBUG:-x}" == "true" ]] && echo " -- DEBUG: API call: ${1} ${@:3} ${xtra_opts[@]} $url" || true
  REPLY=$(curl -sS -X ${1} "${@:3}" "${xtra_opts[@]}" "$url")
  [[ "${API_DEBUG:-x}" == "true" ]] && echo " -- DEBUG: $REPLY" || true
}

json_call () {
  api_call $1 $2 -H "Content-type: application/json" "${@:3}"
}

api() {
  api_call "$@"
  local STATUS=$(jq -n "${REPLY}" | jq -r '.status' 2>/dev/null || echo 'ERROR')
  [[ "${STATUS}" == "OK" ]] && return 0
  local MESSAGE=$(jq -n "${REPLY}" | jq -r '.message' 2>/dev/null)
  [[ "${MESSAGE}" == "null" ]] && MESSAGE="${REPLY}"
  echo "      -> API call '${2}' failed: ${MESSAGE}"
  return -1
}

builtin_disable() {
  echo "Disabling Builtin Users API"
  api DELETE 'admin/settings/BuiltinUsers.KEY'
  echo
}

builtin_enable() {
  echo "Setting Builtin Users Key"
  api PUT 'admin/settings/BuiltinUsers.KEY' -d "${API_USERSKEY}" 
  echo
}

api_by_token() {
  echo "Protecting admin API with token"
  export API_LOCAL="false"
  api PUT 'admin/settings/:BlockedApiKey' -d "${API_KEY}"
  api PUT 'admin/settings/:BlockedApiPolicy' -d 'unblock-key'
  api PUT 'admin/settings/:BlockedApiEndpoints' -d 'admin,builtin-users'
  echo
}

api_only_local() {
  echo "Restricting admin API to localhost only"
  api PUT  'admin/settings/:BlockedApiEndpoints' -d 'admin,builtin-users'
  api PUT 'admin/settings/:BlockedApiPolicy' -d 'localhost-only'
  api DELETE 'admin/settings/:BlockedApiKey'
  export API_LOCAL="true"
  echo
}
